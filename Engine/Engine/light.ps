#define NUM_LIGHTS 4

Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer LightColorBuffer
{
    float4 diffuseColor[NUM_LIGHTS];
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 lightPos1 : TEXCOORD1;
    float3 lightPos2 : TEXCOORD2;
    float3 lightPos3 : TEXCOORD3;
    float3 lightPos4 : TEXCOORD4;
};


float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor, textureColor2, blendColor;
	float lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4;
    float4 color, color1, color2, color3, color4;
    

	 //Wylicz rózne wartoœci œwiat³a bazuj¹c na pozycji
    lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
    lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
    lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
    lightIntensity4 = saturate(dot(input.normal, input.lightPos4));

	// Okreœl rozproszon¹ barwê ka¿dego z czterech œwiate³.
    color1 = diffuseColor[0] * lightIntensity1;
    color2 = diffuseColor[1] * lightIntensity2;
    color3 = diffuseColor[2] * lightIntensity3;
    color4 = diffuseColor[3] * lightIntensity4;

	// Pobierz kolor piksela.
    textureColor = shaderTextures[0].Sample(SampleType, input.tex);

    textureColor2 = shaderTextures[1].Sample(SampleType, input.tex);

	blendColor = textureColor * textureColor2 *2.0;

    // Zmiksuj kolory
    color = saturate(color1 + color2 + color3 + color4) * blendColor;
	
    return color;
}
